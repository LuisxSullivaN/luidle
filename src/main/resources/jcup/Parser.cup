package com.sullivan.parser;

import java_cup.runtime.*;
import java.util.List;

parser code {:
    Scanner scanner;
    ErrorType errorType;

    public parser(Scanner scanner) {
        this.scanner = scanner;
    }
:}

scan with{:
    return scanner.next_token();
:}

terminal MAIN, VOID, ENDF, IF, ENDIF, ELSE, FOR, ENDFOR, READLN, PRINT, TRUE, FALSE;
terminal LPAR, RPAR, COLON, COMMA, SEMICOLON, ASSIGN, PIPE, DOT, DOUBLE_QUOTE, SINGLE_QUOTE,
		 NEGATE, AMPERSAND, INV_DIAGONAL, DOLLAR, UNDERSCORE, HASH, AT, EXP, L_EXCL,
		 		 OP_QMARK, CLOSE_QMARK, LBRACKET, RBRACKET, LBRACE, RBRACE;
terminal INT, CHAR, BOOL, STRING, FLOAT;
terminal IDENTIFIER;
terminal PLUS, MINUS, DIVIDE, TIMES, MOD;
terminal EQUAL, LOWER_THAN, GREATER_THAN, LOWER_EQ_THAN, GREATER_EQ_THAN;
terminal AND, OR, NOT_EQUAL;
terminal STRING_LITERAL, CHARACTER_LITERAL, INTEGER, REAL;

non terminal main_method;
non terminal statement;
non terminal statement_list;
non terminal declaration;
non terminal declaration_option;
non terminal asignation;
non terminal if_statement;
non terminal for_statement;
non terminal input_statement;
non terminal output_statement;
non terminal data_type;
non terminal expression;
non terminal logic_expression;
non terminal logic_operator;
non terminal rel_operator;
non terminal arit_expression;
non terminal arit_operand;
non terminal arit_operator;
non terminal for_declaration;
non terminal for_incremental;
non terminal printable;
non terminal literal;

precedence left PLUS, MINUS, TIMES, DIVIDE, MOD;
precedence left AND, OR, NOT_EQUAL;
precedence left EQUAL, LOWER_THAN, GREATER_THAN, LOWER_EQ_THAN, GREATER_EQ_THAN;
precedence left LPAR, RPAR;

start with main_method;

main_method ::= MAIN LPAR RPAR VOID COLON statement_list ENDF SEMICOLON;
statement_list ::= statement | statement_list statement;

statement ::= declaration SEMICOLON
            | asignation
            | if_statement
            | for_statement
            | input_statement
            | output_statement
            ;


declaration ::= data_type declaration_option
			;

declaration_option ::= IDENTIFIER
					| IDENTIFIER ASSIGN expression
					| IDENTIFIER COMMA declaration_option
					| IDENTIFIER ASSIGN expression COMMA declaration_option
					;

asignation ::= IDENTIFIER ASSIGN expression SEMICOLON;

if_statement ::= IF LPAR logic_expression RPAR COLON statement_list ENDIF SEMICOLON
            | IF LPAR logic_expression RPAR COLON statement_list ELSE statement_list ENDIF SEMICOLON
            ;

for_statement ::= FOR LPAR for_declaration SEMICOLON logic_expression SEMICOLON for_incremental LPAR COLON statement_list ENDFOR SEMICOLON;

for_declaration ::= data_type IDENTIFIER ASSIGN expression;

for_incremental ::= IDENTIFIER ASSIGN IDENTIFIER arit_operator arit_operand;

input_statement ::= READLN LPAR IDENTIFIER RPAR SEMICOLON;

output_statement ::= PRINT LPAR printable RPAR SEMICOLON;

printable ::= expression
            | expression COMMA printable
            ;

data_type ::= INT
            | STRING
            | BOOL
            | CHAR
            | FLOAT
            ;
expression ::= literal
            | arit_expression
            | logic_expression
            ;

literal ::= STRING_LITERAL
        | CHARACTER_LITERAL
        | INTEGER
        | REAL
        | TRUE
        | FALSE
        ;

arit_expression ::= arit_operand arit_operator arit_operand
                | arit_operand arit_operator arit_expression
                | arit_expression arit_operator arit_operand
                | LPAR arit_expression RPAR
                ; 

arit_operand ::= IDENTIFIER
            | INTEGER
            | REAL
            ;

arit_operator ::= PLUS
                | MINUS
                | DIVIDE
                | TIMES
                | MOD
                ;

logic_expression ::= arit_operand rel_operator arit_operand
                | arit_operand rel_operator logic_expression
                | logic_expression rel_operator arit_operand
                | LPAR logic_expression RPAR
                | logic_expression logic_operator logic_expression
                ;

rel_operator ::= EQUAL
            | LOWER_THAN
            | GREATER_THAN
            | LOWER_EQ_THAN
            | GREATER_EQ_THAN
            ;

logic_operator ::= AND
                | OR
                | NOT_EQUAL
                ;
