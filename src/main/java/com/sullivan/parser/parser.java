
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.sullivan.parser;

import java_cup.runtime.*;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\012\000\002\004" +
    "\003\000\002\004\004\000\002\003\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\005\004\000\002\006\003\000\002" +
    "\006\005\000\002\006\005\000\002\006\007\000\002\007" +
    "\006\000\002\010\012\000\002\010\014\000\002\011\016" +
    "\000\002\024\006\000\002\025\007\000\002\012\007\000" +
    "\002\013\007\000\002\026\003\000\002\026\005\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\004\004\005\001\002\000\004\002\205\001" +
    "\002\000\004\020\006\001\002\000\004\021\007\001\002" +
    "\000\004\005\010\001\002\000\004\022\011\001\002\000" +
    "\026\007\021\012\031\014\034\015\027\051\014\052\016" +
    "\053\030\054\023\055\025\056\020\001\002\000\004\024" +
    "\204\001\002\000\036\006\uffff\007\uffff\010\uffff\011\uffff" +
    "\012\uffff\013\uffff\014\uffff\015\uffff\051\uffff\052\uffff\053" +
    "\uffff\054\uffff\055\uffff\056\uffff\001\002\000\004\056\uffe8" +
    "\001\002\000\036\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012" +
    "\ufffb\013\ufffb\014\ufffb\015\ufffb\051\ufffb\052\ufffb\053\ufffb" +
    "\054\ufffb\055\ufffb\056\ufffb\001\002\000\004\056\uffe5\001" +
    "\002\000\004\056\175\001\002\000\004\025\171\001\002" +
    "\000\004\020\156\001\002\000\036\006\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\051\ufffa" +
    "\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\001\002\000" +
    "\004\056\uffe7\001\002\000\030\006\154\007\021\012\031" +
    "\014\034\015\027\051\014\052\016\053\030\054\023\055" +
    "\025\056\020\001\002\000\004\056\uffe4\001\002\000\036" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8" +
    "\056\ufff8\001\002\000\004\020\145\001\002\000\004\056" +
    "\uffe6\001\002\000\004\020\041\001\002\000\036\006\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015" +
    "\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc" +
    "\001\002\000\036\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\015\ufff9\051\ufff9\052\ufff9\053\ufff9" +
    "\054\ufff9\055\ufff9\056\ufff9\001\002\000\004\020\035\001" +
    "\002\000\004\056\036\001\002\000\004\021\037\001\002" +
    "\000\004\024\040\001\002\000\036\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\051\uffec" +
    "\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\001\002\000" +
    "\014\051\014\052\016\053\030\054\023\055\025\001\002" +
    "\000\004\024\126\001\002\000\004\056\044\001\002\000" +
    "\004\025\045\001\002\000\022\016\050\017\054\020\051" +
    "\056\060\074\053\075\052\076\046\077\057\001\002\000" +
    "\034\021\uffde\023\uffde\024\uffde\057\uffd5\060\uffd5\061\uffd5" +
    "\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070" +
    "\uffd5\001\002\000\030\021\uffe1\023\uffe1\024\uffe1\064\072" +
    "\065\074\066\076\067\066\070\065\071\104\072\110\073" +
    "\106\001\002\000\010\021\uffdc\023\uffdc\024\uffdc\001\002" +
    "\000\012\020\051\056\060\076\077\077\101\001\002\000" +
    "\010\021\uffdf\023\uffdf\024\uffdf\001\002\000\010\021\uffe0" +
    "\023\uffe0\024\uffe0\001\002\000\010\021\uffdb\023\uffdb\024" +
    "\uffdb\001\002\000\004\024\uffee\001\002\000\022\021\uffe2" +
    "\023\uffe2\024\uffe2\057\073\060\063\061\064\062\075\063" +
    "\071\001\002\000\034\021\uffdd\023\uffdd\024\uffdd\057\uffd4" +
    "\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066" +
    "\uffd4\067\uffd4\070\uffd4\001\002\000\044\020\uffd6\021\uffd6" +
    "\023\uffd6\024\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063" +
    "\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6" +
    "\072\uffd6\073\uffd6\001\002\000\026\057\073\060\063\061" +
    "\064\062\075\063\071\064\072\065\074\066\076\067\066" +
    "\070\065\001\002\000\010\021\uffe3\023\uffe3\024\uffe3\001" +
    "\002\000\012\020\uffd2\056\uffd2\076\uffd2\077\uffd2\001\002" +
    "\000\012\020\uffd1\056\uffd1\076\uffd1\077\uffd1\001\002\000" +
    "\012\020\uffc5\056\uffc5\076\uffc5\077\uffc5\001\002\000\012" +
    "\020\uffc6\056\uffc6\076\uffc6\077\uffc6\001\002\000\012\020" +
    "\117\056\060\076\077\077\101\001\002\000\012\020\102" +
    "\056\060\076\077\077\101\001\002\000\012\020\uffcf\056" +
    "\uffcf\076\uffcf\077\uffcf\001\002\000\012\020\uffc9\056\uffc9" +
    "\076\uffc9\077\uffc9\001\002\000\012\020\uffd3\056\uffd3\076" +
    "\uffd3\077\uffd3\001\002\000\012\020\uffc8\056\uffc8\076\uffc8" +
    "\077\uffc8\001\002\000\012\020\uffd0\056\uffd0\076\uffd0\077" +
    "\uffd0\001\002\000\012\020\uffc7\056\uffc7\076\uffc7\077\uffc7" +
    "\001\002\000\044\020\uffd5\021\uffd5\023\uffd5\024\uffd5\057" +
    "\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5" +
    "\066\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\001" +
    "\002\000\030\021\uffce\023\uffce\024\uffce\064\072\065\074" +
    "\066\076\067\066\070\065\071\uffce\072\uffce\073\uffce\001" +
    "\002\000\044\020\uffd4\021\uffd4\023\uffd4\024\uffd4\057\uffd4" +
    "\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066" +
    "\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\001\002" +
    "\000\012\020\102\056\060\076\077\077\101\001\002\000" +
    "\030\021\uffcd\023\uffcd\024\uffcd\064\072\065\074\066\076" +
    "\067\066\070\065\071\104\072\110\073\106\001\002\000" +
    "\012\020\uffc4\056\uffc4\076\uffc4\077\uffc4\001\002\000\010" +
    "\056\060\076\077\077\101\001\002\000\012\020\uffc2\056" +
    "\uffc2\076\uffc2\077\uffc2\001\002\000\012\020\102\056\060" +
    "\076\077\077\101\001\002\000\012\020\uffc3\056\uffc3\076" +
    "\uffc3\077\uffc3\001\002\000\014\064\072\065\074\066\076" +
    "\067\066\070\065\001\002\000\030\021\uffca\023\uffca\024" +
    "\uffca\064\072\065\074\066\076\067\066\070\065\071\104" +
    "\072\110\073\106\001\002\000\030\021\uffcc\023\uffcc\024" +
    "\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc" +
    "\072\uffcc\073\uffcc\001\002\000\024\021\115\064\072\065" +
    "\074\066\076\067\066\070\065\071\104\072\110\073\106" +
    "\001\002\000\030\021\uffcb\023\uffcb\024\uffcb\064\uffcb\065" +
    "\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb" +
    "\001\002\000\022\021\uffda\023\uffda\024\uffda\057\073\060" +
    "\063\061\064\062\075\063\071\001\002\000\012\020\117" +
    "\056\060\076\077\077\101\001\002\000\022\021\uffd9\023" +
    "\uffd9\024\uffd9\057\073\060\063\061\064\062\075\063\071" +
    "\001\002\000\010\056\060\076\077\077\101\001\002\000" +
    "\022\021\uffd8\023\uffd8\024\uffd8\057\uffd8\060\uffd8\061\uffd8" +
    "\062\uffd8\063\uffd8\001\002\000\014\057\073\060\063\061" +
    "\064\062\075\063\071\001\002\000\016\021\125\057\073" +
    "\060\063\061\064\062\075\063\071\001\002\000\022\021" +
    "\uffd7\023\uffd7\024\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7" +
    "\063\uffd7\001\002\000\012\020\102\056\060\076\077\077" +
    "\101\001\002\000\024\024\130\064\072\065\074\066\076" +
    "\067\066\070\065\071\104\072\110\073\106\001\002\000" +
    "\004\056\132\001\002\000\004\020\137\001\002\000\004" +
    "\025\133\001\002\000\004\056\134\001\002\000\014\057" +
    "\073\060\063\061\064\062\075\063\071\001\002\000\010" +
    "\056\060\076\077\077\101\001\002\000\004\020\uffed\001" +
    "\002\000\004\022\140\001\002\000\026\007\021\012\031" +
    "\014\034\015\027\051\014\052\016\053\030\054\023\055" +
    "\025\056\020\001\002\000\030\007\021\012\031\013\143" +
    "\014\034\015\027\051\014\052\016\053\030\054\023\055" +
    "\025\056\020\001\002\000\036\006\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\051\ufffe\052" +
    "\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\001\002\000\004" +
    "\024\144\001\002\000\036\006\uffef\007\uffef\010\uffef\011" +
    "\uffef\012\uffef\013\uffef\014\uffef\015\uffef\051\uffef\052\uffef" +
    "\053\uffef\054\uffef\055\uffef\056\uffef\001\002\000\022\016" +
    "\050\017\054\020\051\056\060\074\053\075\052\076\046" +
    "\077\057\001\002\000\006\021\uffea\023\152\001\002\000" +
    "\004\021\150\001\002\000\004\024\151\001\002\000\036" +
    "\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb" +
    "\056\uffeb\001\002\000\022\016\050\017\054\020\051\056" +
    "\060\074\053\075\052\076\046\077\057\001\002\000\004" +
    "\021\uffe9\001\002\000\004\024\155\001\002\000\004\002" +
    "\000\001\002\000\012\020\102\056\060\076\077\077\101" +
    "\001\002\000\024\021\160\064\072\065\074\066\076\067" +
    "\066\070\065\071\104\072\110\073\106\001\002\000\004" +
    "\022\161\001\002\000\026\007\021\012\031\014\034\015" +
    "\027\051\014\052\016\053\030\054\023\055\025\056\020" +
    "\001\002\000\032\007\021\010\164\011\163\012\031\014" +
    "\034\015\027\051\014\052\016\053\030\054\023\055\025" +
    "\056\020\001\002\000\026\007\021\012\031\014\034\015" +
    "\027\051\014\052\016\053\030\054\023\055\025\056\020" +
    "\001\002\000\004\024\165\001\002\000\036\006\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\001" +
    "\002\000\030\007\021\010\167\012\031\014\034\015\027" +
    "\051\014\052\016\053\030\054\023\055\025\056\020\001" +
    "\002\000\004\024\170\001\002\000\036\006\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\051" +
    "\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\001\002" +
    "\000\022\016\050\017\054\020\051\056\060\074\053\075" +
    "\052\076\046\077\057\001\002\000\004\024\173\001\002" +
    "\000\036\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2" +
    "\055\ufff2\056\ufff2\001\002\000\004\024\ufff7\001\002\000" +
    "\010\023\176\024\ufff6\025\177\001\002\000\004\056\175" +
    "\001\002\000\022\016\050\017\054\020\051\056\060\074" +
    "\053\075\052\076\046\077\057\001\002\000\006\023\201" +
    "\024\ufff5\001\002\000\004\056\175\001\002\000\004\024" +
    "\ufff3\001\002\000\004\024\ufff4\001\002\000\036\006\ufffd" +
    "\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015" +
    "\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\012\004\023\005\011\007\031\010" +
    "\014\011\021\012\032\013\025\014\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\141\005\011\007\031\010\014\011\021" +
    "\012\032\013\025\014\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\042\024\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\015\054\016\046\021\055\022\060\027\061\001\001\000" +
    "\002\001\001\000\006\017\106\020\104\001\001\000\002" +
    "\001\001\000\010\016\113\021\123\022\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\067\023\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\117\022\115\001\001" +
    "\000\006\016\102\022\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\067\001\001\000\002\001\001\000\006\016\113\022\110" +
    "\001\001\000\006\017\106\020\104\001\001\000\002\001" +
    "\001\000\004\022\112\001\001\000\002\001\001\000\006" +
    "\016\111\022\110\001\001\000\002\001\001\000\004\020" +
    "\067\001\001\000\006\017\106\020\104\001\001\000\002" +
    "\001\001\000\006\017\106\020\104\001\001\000\002\001" +
    "\001\000\004\023\066\001\001\000\006\021\123\022\122" +
    "\001\001\000\004\023\120\001\001\000\004\022\121\001" +
    "\001\000\002\001\001\000\004\023\066\001\001\000\004" +
    "\023\120\001\001\000\002\001\001\000\006\016\126\022" +
    "\110\001\001\000\006\017\106\020\104\001\001\000\004" +
    "\025\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\134\001\001\000\004\022\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\012\004\140\005\011\007\031\010\014\011\021\012\032" +
    "\013\025\014\016\001\001\000\022\003\141\005\011\007" +
    "\031\010\014\011\021\012\032\013\025\014\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\015\145\016\046\021\055\022\060\026\146\027\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\015\145\016\046\021\055" +
    "\022\060\026\152\027\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\156\022\110" +
    "\001\001\000\006\017\106\020\104\001\001\000\002\001" +
    "\001\000\024\003\012\004\161\005\011\007\031\010\014" +
    "\011\021\012\032\013\025\014\016\001\001\000\022\003" +
    "\141\005\011\007\031\010\014\011\021\012\032\013\025" +
    "\014\016\001\001\000\024\003\012\004\165\005\011\007" +
    "\031\010\014\011\021\012\032\013\025\014\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\141\005" +
    "\011\007\031\010\014\011\021\012\032\013\025\014\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\015" +
    "\171\016\046\021\055\022\060\027\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\202\001\001\000\014\015\177\016\046" +
    "\021\055\022\060\027\061\001\001\000\002\001\001\000" +
    "\004\006\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return scanner.next_token();

    }


    Scanner scanner;
    ErrorType errorType;

    public parser(Scanner scanner) {
        this.scanner = scanner;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main_method EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main_method ::= MAIN LPAR RPAR VOID COLON statement_list ENDF SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_method",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_list ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= declaration SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= asignation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= for_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= input_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= output_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= data_type declaration_option 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration_option ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_option",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration_option ::= IDENTIFIER ASSIGN expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_option",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration_option ::= IDENTIFIER COMMA declaration_option 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_option",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration_option ::= IDENTIFIER ASSIGN expression COMMA declaration_option 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_option",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // asignation ::= IDENTIFIER ASSIGN expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // if_statement ::= IF LPAR logic_expression RPAR COLON statement_list ENDIF SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // if_statement ::= IF LPAR logic_expression RPAR COLON statement_list ELSE statement_list ENDIF SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // for_statement ::= FOR LPAR for_declaration SEMICOLON logic_expression SEMICOLON for_incremental LPAR COLON statement_list ENDFOR SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // for_declaration ::= data_type IDENTIFIER ASSIGN expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // for_incremental ::= IDENTIFIER ASSIGN IDENTIFIER arit_operator arit_operand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_incremental",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // input_statement ::= READLN LPAR IDENTIFIER RPAR SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // output_statement ::= PRINT LPAR printable RPAR SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // printable ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printable",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // printable ::= expression COMMA printable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printable",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // data_type ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // data_type ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // data_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // data_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // data_type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= arit_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= logic_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // literal ::= CHARACTER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // literal ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // literal ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // literal ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // literal ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arit_expression ::= arit_operand arit_operator arit_operand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arit_expression ::= arit_operand arit_operator arit_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // arit_expression ::= arit_expression arit_operator arit_operand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arit_expression ::= LPAR arit_expression RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arit_operand ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_operand",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arit_operand ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_operand",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arit_operand ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_operand",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arit_operator ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_operator",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arit_operator ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_operator",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arit_operator ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_operator",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arit_operator ::= TIMES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_operator",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arit_operator ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_operator",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // logic_expression ::= arit_operand rel_operator arit_operand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // logic_expression ::= arit_operand rel_operator logic_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // logic_expression ::= logic_expression rel_operator arit_operand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // logic_expression ::= LPAR logic_expression RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // logic_expression ::= logic_expression logic_operator logic_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // rel_operator ::= EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_operator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // rel_operator ::= LOWER_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_operator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // rel_operator ::= GREATER_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_operator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rel_operator ::= LOWER_EQ_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_operator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // rel_operator ::= GREATER_EQ_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_operator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // logic_operator ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // logic_operator ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // logic_operator ::= NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
